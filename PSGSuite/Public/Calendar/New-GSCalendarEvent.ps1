function New-GSCalendarEvent {
    <#
    .SYNOPSIS
    Creates a new calendar event

    .DESCRIPTION
    Creates a new calendar event

    .PARAMETER Summary
    Event summary

    .PARAMETER Description
    Event description

    .PARAMETER Id
    Opaque identifier of the event. When creating new single or recurring events, you can specify their IDs. Provided IDs must follow these rules:

    * characters allowed in the ID are those used in base32hex encoding, i.e. lowercase letters a-v and digits 0-9, see section 3.1.2 in RFC2938
    * the length of the ID must be between 5 and 1024 characters
    * the ID must be unique per calendar

    Due to the globally distributed nature of the system, we cannot guarantee that ID collisions will be detected at event creation time. To minimize the risk of collisions we recommend using an established UUID algorithm such as one described in RFC4122.

    If you do not specify an ID, it will be automatically generated by the server.

    .PARAMETER User
    The primary email or UserID of the user. You can exclude the '@domain.com' to insert the Domain in the config or use the special 'me' to indicate the AdminEmail in the config.

    Defaults to the AdminEmail in the config.

    .PARAMETER CalendarID
    The calendar ID of the calendar you would like to list events from.

    Defaults to the user's primary calendar.

    .PARAMETER AttendeeEmails
    The email addresses of the attendees to add.

    NOTE: This performs simple adds without additional attendee options. If additional options are needed, use the Attendees parameter instead.

    .PARAMETER Attendees
    The EventAttendee object(s) to add. Use Add-GSEventAttendee with this parameter for best results.

    .PARAMETER Location
    Event location

    .PARAMETER Visibility
    Visibility of the event.

    Possible values are:
    * "default" - Uses the default visibility for events on the calendar. This is the default value.
    * "public" - The event is public and event details are visible to all readers of the calendar.
    * "private" - The event is private and only event attendees may view event details.
    * "confidential" - The event is private. This value is provided for compatibility reasons.

    .PARAMETER EventColor
    Color of the event as seen in Calendar

    .PARAMETER Reminders
    A list of reminders to add to this calendar event other than the default calendar reminder.

    This parameter expects a 'Google.Apis.Calendar.v3.Data.EventReminder[]' object type. You can create objects of this type easily by using the function 'Add-GSCalendarEventReminder'

    .PARAMETER DisableDefaultReminder
    When $true, disables inheritance of the default Reminders from the Calendar the event was created on.

    .PARAMETER LocalStartDateTime
    Start date and time of the event. Lowest precendence of the three StartDate parameters.

    Defaults to the time the function is ran.

    .PARAMETER LocalEndDateTime
    End date and time of the event. Lowest precendence of the three EndDate parameters.

    Defaults to 30 minutes after the time the function is ran.

    .PARAMETER StartDate
    String representation of the start date. Middle precendence of the three StartDate parameters.

    .PARAMETER EndDate
    String representation of the end date. Middle precendence of the three EndDate parameters.

    .PARAMETER UTCStartDateTime
    String representation of the start date in UTC. Highest precendence of the three StartDate parameters.

    .PARAMETER UTCEndDateTime
    String representation of the end date in UTC. Highest precendence of the three EndDate parameters.

    .PARAMETER PrivateExtendedProperties
    A hashtable of properties that are private to the copy of the event that appears on this calendar.

    .PARAMETER SharedExtendedProperties
    A hashtable of properties that are shared between copies of the event on other attendees' calendars.

    .PARAMETER ExtendedProperties
    Extended properties of the event. This must be of the type 'Google.Apis.Calendar.v3.Data.Event+ExtendedPropertiesData'.

    This is useful for copying another events ExtendedProperties over when creating a new event.

    .PARAMETER CreateMeetEvent
    Create a Google Meet conference event while creating the calendar event.

    This is useful for creating a Google Meet URL which you can send to people for video conferences.

    .EXAMPLE
    New-GSCalendarEvent "Go to the gym" -StartDate (Get-Date "21:00:00") -EndDate (Get-Date "22:00:00")

    Creates an event titled "Go to the gym" for 9-10PM the day the function is ran.

    .LINK
    https://psgsuite.io/Function%20Help/Calendar/New-GSCalendarEvent/
    #>
    [OutputType('Google.Apis.Calendar.v3.Data.Event')]
    [cmdletbinding(DefaultParameterSetName = "AttendeeEmails")]
    Param
    (
        [parameter(Mandatory,Position = 0)]
        [String]
        $Summary,
        [parameter()]
        [String]
        $Description,
        [parameter()]
        [ValidateScript( { if ($_ -match '^[0-9a-v]+$') {
                    $true
                }
                else {
                    throw "The characters allowed in the ID are only those used in base32hex encoding, i.e. lowercase letters a-v and digits 0-9"
                } })]
        [ValidateLength(5,1024)]
        [String]
        $Id,
        [parameter(ValueFromPipelineByPropertyName)]
        [Alias("PrimaryEmail","UserKey","Mail")]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $User = $Script:PSGSuite.AdminEmail,
        [parameter(ValueFromPipelineByPropertyName)]
        [String[]]
        $CalendarID = "primary",
        [parameter(ParameterSetName = "AttendeeEmails")]
        [String[]]
        $AttendeeEmails,
        [parameter(ParameterSetName = "AttendeeObjects")]
        [Google.Apis.Calendar.v3.Data.EventAttendee[]]
        $Attendees,
        [parameter()]
        [String]
        $Location,
        [parameter()]
        [ValidateSet('default','public','private','confidential')]
        [String]
        $Visibility,
        [parameter()]
        [ValidateSet("Periwinkle","Seafoam","Lavender","Coral","Goldenrod","Beige","Cyan","Grey","Blue","Green","Red")]
        [String]
        $EventColor,
        [parameter()]
        [Google.Apis.Calendar.v3.Data.EventReminder[]]
        $Reminders,
        [parameter()]
        [Alias('DisableReminder')]
        [Switch]
        $DisableDefaultReminder,
        [parameter()]
        [DateTime]
        $LocalStartDateTime = (Get-Date),
        [parameter()]
        [DateTime]
        $LocalEndDateTime = (Get-Date).AddMinutes(30),
        [parameter()]
        [String]
        $StartDate,
        [parameter()]
        [String]
        $EndDate,
        [parameter()]
        [String]
        $UTCStartDateTime,
        [parameter()]
        [String]
        $UTCEndDateTime,
        [parameter()]
        [Hashtable]
        $PrivateExtendedProperties,
        [parameter()]
        [Hashtable]
        $SharedExtendedProperties,
        [parameter()]
        [Google.Apis.Calendar.v3.Data.Event+ExtendedPropertiesData]
        $ExtendedProperties,
        [parameter()]
        [switch]
        $CreateMeetEvent
    )
    Begin {
        $colorHash = @{
            Periwinkle = 1
            Seafoam    = 2
            Lavender   = 3
            Coral      = 4
            Goldenrod  = 5
            Beige      = 6
            Cyan       = 7
            Grey       = 8
            Blue       = 9
            Green      = 10
            Red        = 11
        }
    }
    Process {
        try {
            foreach ($U in $User) {
                if ($U -ceq 'me') {
                    $U = $Script:PSGSuite.AdminEmail
                }
                elseif ($U -notlike "*@*.*") {
                    $U = "$($U)@$($Script:PSGSuite.Domain)"
                }
                $serviceParams = @{
                    Scope       = 'https://www.googleapis.com/auth/calendar'
                    ServiceType = 'Google.Apis.Calendar.v3.CalendarService'
                    User        = $U
                }
                $service = New-GoogleService @serviceParams
                if ($PSCmdlet.ParameterSetName -eq 'AttendeeEmails' -and $PSBoundParameters.Keys -contains 'AttendeeEmails') {
                    [Google.Apis.Calendar.v3.Data.EventAttendee[]]$Attendees = $AttendeeEmails | ForEach-Object {
                        Add-GSEventAttendee -Email $_
                    }
                }
                $body = New-Object 'Google.Apis.Calendar.v3.Data.Event'
                if ($Attendees) {
                    $body.Attendees = [Google.Apis.Calendar.v3.Data.EventAttendee[]]$Attendees
                }
                $RemindersData = $null
                foreach ($key in $PSBoundParameters.Keys) {
                    switch ($key) {
                        EventColor {
                            $body.ColorId = $colorHash[$EventColor]
                        }
                        PrivateExtendedProperties {
                            if (-not $ExtendedProperties) {
                                $ExtendedProperties = New-Object 'Google.Apis.Calendar.v3.Data.Event+ExtendedPropertiesData' -Property @{
                                    Private__ = (New-Object 'System.Collections.Generic.Dictionary[string,string]')
                                    Shared    = (New-Object 'System.Collections.Generic.Dictionary[string,string]')
                                }
                            }
                            elseif (-not $ExtendedProperties.Private__) {
                                $ExtendedProperties.Private__ = (New-Object 'System.Collections.Generic.Dictionary[string,string]')
                            }
                            foreach ($prop in $PrivateExtendedProperties.Keys) {
                                $ExtendedProperties.Private__.Add($prop,$PrivateExtendedProperties[$prop])
                            }
                        }
                        SharedExtendedProperties {
                            if (-not $ExtendedProperties) {
                                $ExtendedProperties = New-Object 'Google.Apis.Calendar.v3.Data.Event+ExtendedPropertiesData' -Property @{
                                    Private__ = (New-Object 'System.Collections.Generic.Dictionary[string,string]')
                                    Shared    = (New-Object 'System.Collections.Generic.Dictionary[string,string]')
                                }
                            }
                            elseif (-not $ExtendedProperties.Shared) {
                                $ExtendedProperties.Shared = (New-Object 'System.Collections.Generic.Dictionary[string,string]')
                            }
                            foreach ($prop in $SharedExtendedProperties.Keys) {
                                $ExtendedProperties.Shared.Add($prop,$SharedExtendedProperties[$prop])
                            }
                        }
                        Reminders {
                            if ($null -eq $RemindersData) {
                                $RemindersData = New-Object 'Google.Apis.Calendar.v3.Data.Event+RemindersData'
                            }
                            $RemindersData.Overrides = $Reminders
                        }
                        DisableDefaultReminder {
                            if ($null -eq $RemindersData) {
                                $RemindersData = New-Object 'Google.Apis.Calendar.v3.Data.Event+RemindersData'
                            }
                            $RemindersData.UseDefault = (-not $DisableDefaultReminder)
                        }
                        Default {
                            if ($body.PSObject.Properties.Name -contains $key) {
                                $body.$key = $PSBoundParameters[$key]
                            }
                        }
                    }
                }
                if ($RemindersData) {
                    $body.Reminders = $RemindersData
                }
                if ($ExtendedProperties) {
                    $body.ExtendedProperties = $ExtendedProperties
                }
                $body.Start = if ($UTCStartDateTime) {
                    New-Object 'Google.Apis.Calendar.v3.Data.EventDateTime' -Property @{
                        DateTime = $UTCStartDateTime
                    }
                }
                elseif ($StartDate) {
                    New-Object 'Google.Apis.Calendar.v3.Data.EventDateTime' -Property @{
                        Date = (Get-Date $StartDate -Format "yyyy-MM-dd")
                    }
                }
                else {
                    New-Object 'Google.Apis.Calendar.v3.Data.EventDateTime' -Property @{
                        DateTime = $LocalStartDateTime
                    }
                }
                $body.End = if ($UTCEndDateTime) {
                    New-Object 'Google.Apis.Calendar.v3.Data.EventDateTime' -Property @{
                        DateTime = $UTCEndDateTime
                    }
                }
                elseif ($EndDate) {
                    New-Object 'Google.Apis.Calendar.v3.Data.EventDateTime' -Property @{
                        Date = (Get-Date $EndDate -Format "yyyy-MM-dd")
                    }
                }
                else {
                    New-Object 'Google.Apis.Calendar.v3.Data.EventDateTime' -Property @{
                        DateTime = $LocalEndDateTime
                    }
                }
                $verbMsg = $null
                if ($CreateMeetEvent) {
                    $createRequest = New-Object 'Google.Apis.Calendar.v3.Data.CreateConferenceRequest'
                    $createRequest.RequestId = (New-Guid).ToString('n')
                    $confData = New-Object 'Google.Apis.Calendar.v3.Data.ConferenceData'
                    $confData.CreateRequest = $createRequest
                    $body.ConferenceData = $confData
                    $verbMsg = ' with Meet conferencing'
                }
                foreach ($calId in $CalendarID) {
                    Write-Verbose "Creating Calendar Event '$($Summary)'$($verbMsg) on calendar '$calId' for user '$U'"
                    $request = $service.Events.Insert($body,$calId)
                    if ($CreateMeetEvent) {
                        $request.ConferenceDataVersion = 1
                    }
                    $request.Execute() | Add-Member -MemberType NoteProperty -Name 'User' -Value $U -PassThru | Add-Member -MemberType NoteProperty -Name 'CalendarId' -Value $calId -PassThru
                }
            }
        }
        catch {
            if ($ErrorActionPreference -eq 'Stop') {
                $PSCmdlet.ThrowTerminatingError($_)
            }
            else {
                Write-Error $_
            }
        }
    }
}
